from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from db.db_utils import calculate_income_for_period

router = Router()


class ReportIncomeState(StatesGroup):
    waiting_for_date_range = State()


@router.message(F.text == "üìä –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç")
async def start_report(message: types.Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É."""
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.mm.yyyy - dd.mm.yyyy:")
    await state.set_state(ReportIncomeState.waiting_for_date_range)


@router.message(ReportIncomeState.waiting_for_date_range)
async def process_date_range(message: types.Message, state: FSMContext):
    """–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥."""
    try:
        date_range = message.text.strip()
        start_date, end_date = map(str.strip, date_range.split("-"))

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –¥–æ—Ö–æ–¥—É
        total_income = calculate_income_for_period(start_date, end_date)

        await message.answer(
            f"–ó–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start_date} - {end_date}:\n"
            f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–æ—Ö–æ–¥—É: {total_income} –≥—Ä–Ω"
        )
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
