from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from db.models import get_records_by_date

router = Router()


class ViewRecordsState(StatesGroup):
    waiting_for_date = State()


@router.message(F.text == "üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏")
async def view_records_start(message: types.Message, state: FSMContext):
    """
    –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Å—ñ–≤.
    –ó–∞–ø–∏—Ç—É—î –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.mm.yy.
    """
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.mm.yy (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 12.10.2024):")
    await state.set_state(ViewRecordsState.waiting_for_date)


@router.message(ViewRecordsState.waiting_for_date)
async def process_view_records_date(message: types.Message, state: FSMContext):
    """
    –û—Ç—Ä–∏–º—É—î –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –¥–∞—Ç—É.
    """
    date = message.text.strip()
    master_id = message.from_user.id  # ID –º–∞–π—Å—Ç—Ä–∞
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞ —Ç–∞ –¥–∞—Ç–∏
        records = get_records_by_date(master_id, date)
        if not records:
            await message.answer("–ù–∞ —Ü—é –¥–∞—Ç—É –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
        else:
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å—ñ–≤
            response = "\n\n".join(
                [
                    f"–ö–ª—ñ—î–Ω—Ç: {record['name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {record['phone']}\n"
                    f"–ß–∞—Å: {record['time']}\n"
                    f"–ü–æ—Å–ª—É–≥–∞: {record['service_name']}"
                    for record in records
                ]
            )
            await message.answer(f"–ó–∞–ø–∏—Å–∏ –Ω–∞ {date}:\n\n{response}")
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        print(f"–ü–æ–º–∏–ª–∫–∞ —É view_records: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    finally:
        await state.clear()
