from datetime import datetime, timedelta
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMIN_IDS
from db.models import get_master_data_for_del  # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Å–ª—É–≥
from keybords.admin import get_admin_keyboard
from keybords.common import get_client_keyboard
from keybords.master import get_master_keyboard
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states.client_booking import ClientBookingState
from db.models import get_all_services, get_all_masters, get_service_name
from db.db_utils import add_client_record

router = Router()


@router.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start."""
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_keyboard())
    elif get_master_data_for_del(user_id):
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, –º–∞–π—Å—Ç—Ä–µ! –û—Å—å –≤–∞—à—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:", reply_markup=get_master_keyboard())
    else:
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–∏ —É –≤—ñ—Ç–∞–ª—å–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_client_keyboard())


def generate_client_services_keyboard():
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —É—Å—ñ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –ø–æ—Å–ª—É–≥–∞–º–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞."""
    services = get_all_services()
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=service['name'], callback_data=f"client_service_{service['id']}")]
            for service in services
        ]
    )


@router.message(F.text == "üìí –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º")
async def start_booking(message: types.Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–∞–ø–∏—Å—É –∫–ª—ñ—î–Ω—Ç–∞."""
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
    keyboard = generate_client_services_keyboard()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=keyboard)
    await state.set_state(ClientBookingState.waiting_for_service)


def generate_masters_keyboard():
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —É—Å—ñ–º–∞ –º–∞–π—Å—Ç—Ä–∞–º–∏."""
    masters = get_all_masters()
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=master['name'], callback_data=f"master_{master['id']}")]
            for master in masters
        ]
    )


@router.callback_query(F.data.startswith("client_service_"))
async def process_client_service_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–æ—Å–ª—É–≥–∏ –∫–ª—ñ—î–Ω—Ç–æ–º."""
    try:
        service_id = int(callback.data.split("_")[2])  # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø–æ—Å–ª—É–≥–∏
        await state.update_data(service_id=service_id)
        keyboard = generate_masters_keyboard()
        await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –º–∞–π—Å—Ç—Ä–∞:", reply_markup=keyboard)
        await state.set_state(ClientBookingState.waiting_for_master)
        await callback.answer()
    except (ValueError, IndexError) as e:
        await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏.")


def generate_dates_keyboard():
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–∞—Ç–∞–º–∏ –Ω–∞ 7 –¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥."""
    keyboard = []

    # –î–æ–¥–∞—î–º–æ –¥–∞—Ç–∏ –Ω–∞ 7 –¥–Ω—ñ–≤ –≤–ø–µ—Ä–µ–¥
    today = datetime.now()
    for i in range(7):
        date = today + timedelta(days=i)
        date_text = date.strftime("%d.%m.%Y")
        keyboard.append([InlineKeyboardButton(text=date_text, callback_data=f"date_{date_text}")])

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–±–æ—Ä—É —ñ–Ω—à–æ—ó –¥–∞—Ç–∏
    # keyboard.append([InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –¥–∞—Ç—É", callback_data="custom_date")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data.startswith("master_"))
async def process_master_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–∞–π—Å—Ç—Ä–∞ —Ç–∞ –∑–∞–ø–∏—Ç—É—î –¥–∞—Ç—É."""
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –º–∞–π—Å—Ç—Ä–∞ –∑ callback_data
    master_record_id = int(callback.data.split("_")[1])  # –¶–µ –ø–æ–ª–µ `id`, –∞ –Ω–µ `master_id`

    # –®—É–∫–∞—î–º–æ –º–∞–π—Å—Ç—Ä–∞ –∑–∞ ID –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö get_all_masters()
    all_masters = get_all_masters()
    master = next((m for m in all_masters if m["id"] == master_record_id), None)

    if not master:
        await callback.answer("–ú–∞–π—Å—Ç—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    master_id = master['master_id']  # –ë–µ—Ä–µ–º–æ `master_id` –¥–ª—è Telegram
    print(f"–ó–±–µ—Ä–µ–∂–µ–Ω–∏–π master_id: {master_id} (–∑ callback_data)")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –º–∞–π—Å—Ç—Ä–∞ —É —Å—Ç–∞–Ω
    await state.update_data(master_id=master_id)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –¥–∞—Ç–∞–º–∏
    keyboard = generate_dates_keyboard()
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=keyboard)
    await state.set_state(ClientBookingState.waiting_for_date)
    await callback.answer()


def generate_times_keyboard():
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —á–∞—Å–æ–º (09:00 –¥–æ 18:00)."""
    times = [f"{hour}:00" for hour in range(9, 19)]
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=time, callback_data=f"time_{time}")] for time in times
        ]
    )


@router.callback_query(F.data.startswith("date_"))
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –¥–∞—Ç–∏."""
    date = callback.data.split("_")[1]  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É
    await state.update_data(date=date)
    keyboard = generate_times_keyboard()
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=keyboard)
    await state.set_state(ClientBookingState.waiting_for_time)
    await callback.answer()


@router.callback_query(F.data.startswith("time_"))
async def process_time_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —á–∞—Å—É."""
    time = callback.data.split("_")[1]  # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å
    await state.update_data(time=time)
    await callback.message.edit_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–ø–∏—Å.")
    await callback.message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
                                  reply_markup=types.ReplyKeyboardMarkup(
                                      keyboard=[
                                          [types.KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
                                      ],
                                      resize_keyboard=True
                                  ))
    await state.set_state(ClientBookingState.waiting_for_contact)
    await callback.answer()


@router.message(ClientBookingState.waiting_for_contact, F.contact)
async def process_contact(message: types.Message, state: FSMContext):
    try:
        contact = message.contact
        user_id = contact.user_id
        if not user_id:
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return

        data = await state.get_data()

        master_id = data.get("master_id")
        service_id = data.get("service_id")
        if not master_id or not service_id:
            await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º–∞–π—Å—Ç—Ä–∞ –∞–±–æ –ø–æ—Å–ª—É–≥—É.")
            return

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –º–∞–π—Å—Ç—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Å —ñ–∑ –∫–Ω–æ–ø–∫–æ—é
        await message.bot.send_message(
            chat_id=master_id,
            text=(
                f"–ù–æ–≤–∏–π –∑–∞–ø–∏—Å:\n"
                f"–Ü–º'—è: {contact.first_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}\n"
                f"–î–∞—Ç–∞: {data.get('date')}\n"
                f"–ß–∞—Å: {data.get('time')}\n"
            ),
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É",
                            url=f"tg://user?id={contact.user_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å",
                            callback_data=f"approve_booking|{contact.user_id}|{data.get('date')}|{data.get('time')}|{service_id}"
                        )
                    ]
                ]
            )
        )

        await message.answer("–í–∞—à—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞–Ω—ñ –º–∞–π—Å—Ç—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        await state.clear()
    except Exception as e:
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        await state.clear()


@router.callback_query(F.data.startswith("approve_booking|"))
async def approve_booking(callback: types.CallbackQuery):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–∞–ø–∏—Å, –¥–æ–¥–∞—î –¥–æ –±–∞–∑–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –∫–ª—ñ—î–Ω—Ç–∞."""
    try:
        # –†–æ–∑–±–∏–≤–∞—î–º–æ callback_data –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        parts = callback.data.split("|")
        if len(parts) != 5:
            await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)
            return

        _, user_id, date, time, service_id = parts

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        client_name = callback.message.text.split("\n")[1].split(": ")[1]
        master_id = callback.from_user.id  # ID –º–∞–π—Å—Ç—Ä–∞, —è–∫–∏–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–∞–ø–∏—Å

        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏
        service_name = get_service_name(int(service_id))

        if not service_name:
            await callback.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ—Å–ª—É–≥—É.", show_alert=True)
            return

        # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        add_client_record(
            name=client_name,
            phone="–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
            service_id=int(service_id),
            date=date,
            time=time,
            master_id=master_id
        )

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
        await callback.message.bot.send_message(
            chat_id=int(user_id),
            text=(
                f"–í–∞—à –∑–∞–ø–∏—Å –Ω–∞ {date}, {time} –¥–æ –∞—Ç–µ–ª—å—î-—Å–∞–ª–æ–Ω—É ¬´–£—Å–ø—ñ—Ö¬ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.\n"
                f"–ß–µ–∫–∞—î–º–æ –≤–∞—Å –∑–∞ –∞–¥—Ä–µ—Å–æ—é: –ù–µ–±–µ—Å–Ω–æ—ó –°–æ—Ç–Ω—ñ 105 –∫–∞–±.409.\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: 0931838307."
            )
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –º–∞–π—Å—Ç—Ä–∞
        await callback.message.edit_text("–ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
        await callback.answer("–ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
    except Exception as e:
        await callback.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}", show_alert=True)
